---
layout: post
title: How to build Rails 5 API only and Ember application
hero_image: /blog/images/heros/post-high.jpg
comments: true
author:
  name: Santiago Pastorino
  email: santiago@wyeworks.com
  twitter_handle: spastorino
  github_handle:  spastorino
  image:  /images/team/santiago-pastorino.jpg
  description: WyeWorks Co-Founder & CTO, Ruby on Rails Core Team Member
published: true
---

A few days ago, following long discussions, [Rails API was merged into Rails master branch](https://github.com/rails/rails/pull/19832).

Because of that, in our latest post we discussed how to build a API only application. We also show how to integrate it with a client-side application implemented with Backbone. If you've missed this post, you can check it out and learn more about [how to integrate Rails API with an Backbone application](http://wyeworks.com/blog/2015/6/11/how-to-build-a-rails-5-api-only-and-backbone-application).

In this issue, we will show how a very similar client-side application build with Ember can be integrated with the same backend application implemented with Rails API. Like in our previous post, we are going to use the Todo application from TodoMVC(todomvc.com).

In addition, we will comment about some issues that were fixed in Rails and Active Model Serializers in order to make easier this integration. Those improvements were the result of testing Rails API against an Ember client-side application, as part of our efforts looking for an optimal fit with the most popular javascript frameworks.

## Building the Backend

### Generate the Rails API only application

First of all, we need to generate a new Rails API only application from scratch. Rails 5 is not released yet, so we have to clone the Github repository and generate our application directly from the source code.

<pre>git clone git://github.com/rails/rails.git
cd rails
bundle exec railties/exe/rails new /tmp/my_api_app --api --edge</pre>

In case you want a detailed explanation about the list of directories and files generated by this command, please take a look at [our previous post](http://wyeworks.com/blog/2015/6/11/how-to-build-a-rails-5-api-only-and-backbone-application). 

However, if we compare with what was described in our previous issue, we can see a subtle difference in the generated Gemfile: [the `active-model-serializer` gem version changed from  0.10.0.rc1 a 0.10.0.rc2](https://github.com/rails/rails/commit/16db36b56685517c76385f9e0f877a9015bde2ca).

The new Active Model Serializer release candidate includes a [new adapter that works properly with the Ember's RESTAdapter](https://github.com/rails-api/active_model_serializers/pull/958). This addition simplified a lot the integration of our Rails API only backend and the Ember client-side application.

### Scaffolding the Todo resource

The Todo items in the Ember application have two attributes: a string `title` and a boolean `isCompleted`. The following step to build our backend application is precisely to add a resource representing these Todo items.

We can do it just running the `rails generate scaffold` command:

<pre>bin/rails g scaffold todo title isCompleted:boolean</pre>

Since we're now using a new version of the `active-model-serializer` gem, specifically the version 0.10.0.rc2, the scaffold command generates the serializer file for this resource. At the time of writing our previous post, we had to run another command to generate the serializer. It is now changed to be automatically run along the scaffold generator. In fact, this was [an enhancement implemented only a few days ago](https://github.com/rails-api/active_model_serializers/commit/4752e6723a6e0e8c4038ed4f36b87a954ad21097).

Don't forget to run `bin/rake db:migrate` to update the database
schema.

### Choose the appropriate JSON serialization format

Our Rails API only application is going to respond incoming requests in a given JSON format. The process to convert the data into this format is called serialization and this will be possible in our backend application thanks to Active Model Serializer adapters.

By default, Active Model Serializer uses a format provided by the `flatten_json` adapter which is a very simple format only including the list of attributes without any additional metadata about the data being serialized. For instance, using this adapter, a Todo item would be serialized like:

<pre>
{
  "title": "Todo 1",
  "isCompleted": false
}
</pre>

Luckily, we have additional adapters shipped into Active Model Serializer since 0.10.0.rc2, giving us a lot of flexibility. In particular, we need to pick a JSON format matching with our Ember client-side application. We can achieve that selecting a format that works well with the Ember's RESTAdapter. The main requirement specified by the RESTAdapter is the presence of the **object root** as part of the JSON payload, as it is explained in the [Ember RESTAdapter documentation](http://guides.emberjs.com/v1.10.0/models/the-rest-adapter). It means we want to serialize a Todo item like this:

<pre>
{
  "todo": {
    "title": "Todo 1",
    "isCompleted": false
  }
}
</pre>

This is easy to do with Active Model Serializer if we choose the `json` adapter instead of the `flatten_json`. We can configure it by creating a new initializer file `config/initializers/ams_json_adapter.rb` including the following line:

<pre>ActiveModel::Serializer.config.adapter = :json</pre>

At this point, the backend application should be ready, so it's testing time! Start the web server with `bin/rails s` and let's create our first Todo using `curl`:

<pre>curl -H "Content-Type:application/json; charset=utf-8" -d '{"todo": {"title":"Todo 1","isCompleted":false}}' http://localhost:3000/todos</pre>

The API application should return the created item serialized in JSON format, including the root element:

<pre>{"todo": {"id":1,"title":"Todo 1","isCompleted":false}}</pre>

Now, let's get the Todo items list:

<pre>curl http://localhost:3000/todos</pre>

and the response should look like this (note the root element in plural):

<pre>{"todos": [{"id":1,"title":"Todo 1","isCompleted":false}]}</pre>
	
